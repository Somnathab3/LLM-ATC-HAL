[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-atc"
version = "0.1.0"
description = "Embodied LLM airâ€‘traffic controller with safety metrics"
authors = [{ name="Your Name", email="you@example.com" }]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["llm", "air-traffic-control", "safety", "hallucination-detection"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Transportation :: Air Traffic Control",
]

dependencies = [
    "sentence-transformers>=2.7",
    "chromadb>=0.4",
    "rich",
    "click",
    "numpy",
    "pandas",
    "matplotlib",
    "tqdm",
    "pyyaml>=6.0",
    "requests>=2.25.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "ollama>=0.1.0",
    "seaborn>=0.11.0",
]

[project.optional-dependencies]
gpu = ["torch", "faiss-gpu"]
docs = ["mkdocs>=1.5", "mkdocstrings[python]>=0.24"]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
bluesky = [
    "bluesky-simulator>=1.0.0",
]
all = [
    "llm-atc[gpu,docs,dev,bluesky]",
]

[project.scripts]
llm-atc = "llm_atc.cli:cli"

[project.urls]
Homepage = "https://github.com/Somnathab3/LLM-ATC-HAL"
Documentation = "https://github.com/Somnathab3/LLM-ATC-HAL/docs"
Repository = "https://github.com/Somnathab3/LLM-ATC-HAL.git"
Issues = "https://github.com/Somnathab3/LLM-ATC-HAL/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["llm_atc*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"llm_atc" = ["**/*.yaml", "**/*.yml", "**/*.json", "**/*.scn"]

# Development tools configuration
[tool.ruff]
line-length = 100
target-version = "py39"
extend-exclude = ["__pycache__", "*.pyc"]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "ANN", "S", "B", "A", "COM", "C4", "DTZ", "EM", "ISC", "ICN", "G", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["ANN101", "ANN102", "S101", "PLR0913", "PLR0912", "PLR0915"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "PLR2004"]
"**/__init__.py" = ["F401"]

[tool.black]
line-length = 100
target-version = ['py39']
extend-exclude = '''
/(
    __pycache__
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "bluesky.*",
    "ollama.*",
    "chromadb.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["llm_atc"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
